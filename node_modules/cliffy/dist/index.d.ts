/// <reference types="node" />
import { Command, Commands, Action } from "./definitions";
export * from "./definitions";
export declare class CLI {
    private readonly cmds;
    private readonly readline;
    private delimiter;
    private isActive;
    private name?;
    private info?;
    private version?;
    constructor(opts?: {
        input?: NodeJS.ReadableStream;
        output?: NodeJS.WritableStream;
    });
    private paramIsRequired;
    private isRestParameter;
    private checkCommandForErrors;
    private executeCommand;
    private invalidCommand;
    private prompt;
    private startREPL;
    private help;
    private removeCommandAliases;
    /** Set the cli delimiter */
    setDelimiter(delimiter: string): this;
    /** Register a command */
    addCommand(name: string, command: Command): this;
    addCommand(name: string, action: Action): this;
    addCommand(name: string, command: Command | Action): this;
    /** Register multiple commands at once (Alias for registerCommands) */
    addCommands(commands: Commands): this;
    removeCommand(command: string): this;
    /** Show the CLI */
    show(): this;
    /** Hide the cli */
    hide(): this;
    /** Show the help menu */
    showHelp(): this;
    setVersion(val: string): this;
    setInfo(val: string): this;
    setName(val: string): this;
    hasCommand(cmd: string): boolean;
    /**
     * Register a command.
     *
     * @deprecated - Use addCommand instead.
     */
    command(name: string, opts: Command | Action): this;
    /**
     * Register multiple commands at once (Alias for registerCommands).
     *
     * @deprecated - Use addCommands instead.
     **/
    commands(name: Commands): this;
    /**
     * Register multiple commands at once (Alias for registerCommands).
     *
     * @deprecated - Use addCommands instead.
     **/
    registerCommands(name: Commands): this;
}
