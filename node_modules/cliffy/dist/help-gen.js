"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const indent = require("indent");
const columnify = require("columnify");
function columns(data) {
    return indent(columnify(data, {
        showHeaders: false,
        minWidth: 30
    }), 4);
}
function genUsage(command, val) {
    let usage = `${command} [options]`;
    if (val instanceof Function || !val.parameters)
        return usage;
    for (const param of val.parameters) {
        if (typeof param === "string")
            usage += ` <${param}>`;
        else
            usage += param.optional ? ` [${param.label}]` : ` <${param.label}>`;
    }
    return usage;
}
function printCommandHelp(command, val) {
    console.log("");
    if (val.description) {
        console.log(`${val.description}\n`);
    }
    console.log(`Usage:\n`);
    console.log(`${indent(genUsage(command, val), 4)}\n`);
    printOptions(val);
    printSubCommands(val);
    console.log("");
}
exports.printCommandHelp = printCommandHelp;
function printOptions(val) {
    if (val.options && val.options.length > 0) {
        console.log(`Options:\n`);
        const options = {};
        val.options.forEach(opt => {
            if (typeof opt === "string") {
                options[`@${opt}`] = "";
                return;
            }
            options[`@${opt.label}`] = opt.description || "";
        });
        console.log(columns(options));
    }
}
function commandDescription(command) {
    if (command instanceof Function)
        return "";
    return command.description || "";
}
function printSubCommands(val) {
    if (val.subcommands) {
        console.log("Sub-Commands:\n");
        const commands = {};
        for (const command in val.subcommands) {
            commands[genUsage(command, val.subcommands[command])] = commandDescription(val.subcommands[command]);
        }
        console.log(columns(commands));
    }
}
function printOverviewHelp(opts) {
    const { name, info, commands, version } = opts;
    const commandDescriptions = {};
    for (const command in commands) {
        commandDescriptions[genUsage(command, commands[command])] = commandDescription(commands[command]);
    }
    if (name) {
        const title = `${name} ${version ? `- ${version}` : ""}`;
        console.log(`\n${title}`);
    }
    if (info)
        console.log(`\n${info}`);
    console.log(`\nUsage:\n`);
    console.log(indent(`<cmd>\n`, 4));
    console.log(`Available commands:\n`);
    console.log(indent(`help <cmd>`, 4));
    console.log(`${columns(commandDescriptions)}\n`);
    return;
}
exports.printOverviewHelp = printOverviewHelp;
//# sourceMappingURL=help-gen.js.map